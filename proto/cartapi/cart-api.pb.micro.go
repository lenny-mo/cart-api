// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cart-api.proto

package cartapi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartApi service

func NewCartApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartApi service

type CartApiService interface {
	FindAll(ctx context.Context, in *FindAllRequest, opts ...client.CallOption) (*FindAllResponse, error)
	Add(ctx context.Context, in *AddCartRequest, opts ...client.CallOption) (*AddCartResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Checkout(ctx context.Context, in *CheckoutRequest, opts ...client.CallOption) (*CheckoutResponse, error)
}

type cartApiService struct {
	c    client.Client
	name string
}

func NewCartApiService(name string, c client.Client) CartApiService {
	return &cartApiService{
		c:    c,
		name: name,
	}
}

func (c *cartApiService) FindAll(ctx context.Context, in *FindAllRequest, opts ...client.CallOption) (*FindAllResponse, error) {
	req := c.c.NewRequest(c.name, "CartApi.FindAll", in)
	out := new(FindAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartApiService) Add(ctx context.Context, in *AddCartRequest, opts ...client.CallOption) (*AddCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartApi.Add", in)
	out := new(AddCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartApiService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "CartApi.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartApiService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "CartApi.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartApiService) Checkout(ctx context.Context, in *CheckoutRequest, opts ...client.CallOption) (*CheckoutResponse, error) {
	req := c.c.NewRequest(c.name, "CartApi.Checkout", in)
	out := new(CheckoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartApi service

type CartApiHandler interface {
	FindAll(context.Context, *FindAllRequest, *FindAllResponse) error
	Add(context.Context, *AddCartRequest, *AddCartResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Checkout(context.Context, *CheckoutRequest, *CheckoutResponse) error
}

func RegisterCartApiHandler(s server.Server, hdlr CartApiHandler, opts ...server.HandlerOption) error {
	type cartApi interface {
		FindAll(ctx context.Context, in *FindAllRequest, out *FindAllResponse) error
		Add(ctx context.Context, in *AddCartRequest, out *AddCartResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		Checkout(ctx context.Context, in *CheckoutRequest, out *CheckoutResponse) error
	}
	type CartApi struct {
		cartApi
	}
	h := &cartApiHandler{hdlr}
	return s.Handle(s.NewHandler(&CartApi{h}, opts...))
}

type cartApiHandler struct {
	CartApiHandler
}

func (h *cartApiHandler) FindAll(ctx context.Context, in *FindAllRequest, out *FindAllResponse) error {
	return h.CartApiHandler.FindAll(ctx, in, out)
}

func (h *cartApiHandler) Add(ctx context.Context, in *AddCartRequest, out *AddCartResponse) error {
	return h.CartApiHandler.Add(ctx, in, out)
}

func (h *cartApiHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.CartApiHandler.Update(ctx, in, out)
}

func (h *cartApiHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.CartApiHandler.Delete(ctx, in, out)
}

func (h *cartApiHandler) Checkout(ctx context.Context, in *CheckoutRequest, out *CheckoutResponse) error {
	return h.CartApiHandler.Checkout(ctx, in, out)
}
